"""f=FileObject("abcde","dumpfile1")f.save()FileObjectSystem.dump_fileObject(f)######################################FileObjectSystem.read_fileObjects()print(FileObjectSystem.get_fileObject("file","dumpfile")[-1].read())"""import CCAimport osos.environ["CUDA_VISIBLE_DEVICES"] = "0"##################<stage1-1>#################### load datasetswith CCA.Context() as context:    ps=context.PreprocessorSystem    dataset_dir="D:\CCA\datasets\step1"    images=ps.imgload_Preprocessor(dataset_dir,resize=(16,16),onehot=True,types=2).\        concat(ps.gray_Preprocessor().concat(ps.twovalue_Preprocessor()))    #context.DataSetSystem.delete_datasets(["X"])    X = context.DataSetSystem.get_OrExecution("X",images,True,"1")    train_x,test_x =X.zip(5).cut([int(X.length()*0.8)])    #print(train_x.length(),test_x.length())    #nn = context.networks.BpNetwork(context.layers.Factory.layers((256,100,2)),net_id="1",train_method="MBGD",train_mbgd_batchsize=1)    nn=context.networks.CnnNetwork(context.layers.Factory.letNet_5(5),net_id="1",train_method="MBGD")    #nn.set_preprocessor(ps.gray_Preprocessor().concat(ps.twovalue_Preprocessor()))    nn.set_dataset(train_x,"train_x")    nn.set_dataset(test_x,"test_x")    nn.iteration(5000,train_save_interval=200,train_counter_broadcast_interval=100)  # 训练5000次    # nn.dump()    #    ##################<stage1-2>#################### define preprocessor    #Xf fake;    #多种汉字拥有隐性共特征H,以及显性特征U,求H    #最终目标使得Q(G(Z,Cr,Cl)) 尽可能接近于 I(H|Xr)    #判别器D可根据输入汉字X得出H,U    #生成器G可根据输入向量Z和离散变量Cr    #离散变量和连续变量可以以多维矩阵的输入形式，dom(Z)>3 对G的结果I(U|Xf)造成一定的影响（使得 I(U|Xfi∈{Xf})≠I(U|Xf)    # 在 Xri=Xr 时,使得连续汉字变量的区别于单独汉字变量 ），    #但I(H|Xr)=Q(Xf)  （将连续性隐性特征转换为连续性特征？）    #每个真实的汉字Xri    #每个模拟的汉字样本Xfi    #显性特征U    #隐性特征H    #隐性特征需要满足条件 I(H|Xri)=0;I(U|Xri)>0 ; I(Xr)-I(U|Xr)=I(H|Xr)    #stage 1 single chinese char